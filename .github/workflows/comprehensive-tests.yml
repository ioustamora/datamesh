name: Comprehensive DataMesh Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        rust: [stable, beta]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Run unit tests
      run: cargo test --lib --bins --tests unit_tests
      
    - name: Run integration tests
      run: cargo test --test integration_tests
      
    - name: Run API integration tests
      run: cargo test --test api_integration_tests

  cluster-tests:
    name: Cluster Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-cluster-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl hyperfine
        
    - name: Build DataMesh
      run: cargo build --release
      
    - name: Run cluster tests (Rust)
      run: cargo test --test comprehensive_cluster_tests
      
    - name: Run advanced cluster test script
      run: |
        chmod +x examples/advanced_cluster_test.sh
        examples/advanced_cluster_test.sh
        
    - name: Upload cluster test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cluster-test-results-${{ github.run_number }}
        path: cluster_test_*/results/
        retention-days: 7

  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run crypto benchmarks
      run: cargo bench crypto_benchmarks -- --output-format json | tee crypto_bench_results.json
      
    - name: Run network benchmarks
      run: cargo bench network_benchmarks -- --output-format json | tee network_bench_results.json
      
    - name: Run storage benchmarks
      run: cargo bench storage_benchmarks -- --output-format json | tee storage_bench_results.json
      
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ github.run_number }}
        path: "*_bench_results.json"
        retention-days: 30

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: cargo audit
      
    - name: Install cargo-deny
      run: cargo install cargo-deny
      
    - name: Run cargo-deny
      run: cargo deny check
      
    - name: Run security-focused tests
      run: cargo test security

  cross-platform-tests:
    name: Cross-Platform Tests
    runs-on: ${{ matrix.os }}
    timeout-minutes: 25
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-cross-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build
      run: cargo build --release
      
    - name: Run tests
      run: cargo test --lib --bins
      
    - name: Test CLI functionality (Unix)
      if: runner.os != 'Windows'
      run: |
        ./target/release/datamesh --help
        ./target/release/datamesh --version
        
    - name: Test CLI functionality (Windows)
      if: runner.os == 'Windows'
      run: |
        .\target\release\datamesh.exe --help
        .\target\release\datamesh.exe --version

  load-tests:
    name: Load and Stress Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'load-test')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-load-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl hyperfine stress-ng
        
    - name: Build DataMesh
      run: cargo build --release
      
    - name: Run load tests
      env:
        DATAMESH_LOAD_TEST: "true"
        DATAMESH_NODE_COUNT: "10"
        DATAMESH_CONCURRENT_OPS: "50"
        DATAMESH_TEST_DURATION: "300" # 5 minutes
      run: |
        chmod +x examples/advanced_cluster_test.sh
        examples/advanced_cluster_test.sh
        
    - name: Run stress tests
      run: |
        # System stress test
        stress-ng --cpu 2 --io 1 --vm 1 --vm-bytes 128M --timeout 60s &
        STRESS_PID=$!
        
        # Run DataMesh tests under stress
        cargo test --test comprehensive_cluster_tests test_performance_benchmarking
        
        # Stop stress test
        kill $STRESS_PID || true
        
    - name: Upload load test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: load-test-results-${{ github.run_number }}
        path: cluster_test_*/results/
        retention-days: 14

  docker-tests:
    name: Docker Container Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        cat > Dockerfile << EOF
        FROM rust:1.70-slim as builder
        
        WORKDIR /app
        COPY . .
        
        RUN apt-get update && apt-get install -y pkg-config libssl-dev
        RUN cargo build --release
        
        FROM debian:bullseye-slim
        
        RUN apt-get update && apt-get install -y ca-certificates && rm -rf /var/lib/apt/lists/*
        
        COPY --from=builder /app/target/release/datamesh /usr/local/bin/datamesh
        
        EXPOSE 40871 8080
        
        CMD ["datamesh", "--help"]
        EOF
        
        docker build -t datamesh:test .
        
    - name: Test Docker container
      run: |
        # Test basic functionality
        docker run --rm datamesh:test --version
        docker run --rm datamesh:test --help
        
        # Test network creation (basic)
        docker network create datamesh-test || true
        
        # Run bootstrap node
        docker run -d --name datamesh-bootstrap \
          --network datamesh-test \
          -p 40871:40871 \
          datamesh:test bootstrap --non-interactive
          
        sleep 5
        
        # Check if bootstrap is running
        docker ps | grep datamesh-bootstrap
        
        # Cleanup
        docker stop datamesh-bootstrap || true
        docker rm datamesh-bootstrap || true
        docker network rm datamesh-test || true

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
        
    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov
      
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Generate code coverage
      run: |
        cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, cluster-tests, performance-tests, security-tests, cross-platform-tests]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Cluster Tests | ${{ needs.cluster-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Tests | ${{ needs.performance-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Tests | ${{ needs.security-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Cross-Platform Tests | ${{ needs.cross-platform-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        
        # Fail if any critical tests failed
        if [[ "${{ needs.unit-tests.result }}" != "success" || "${{ needs.cluster-tests.result }}" != "success" ]]; then
          echo "Critical tests failed"
          exit 1
        fi